---
apiVersion: apps/v1
# Выбираем контроллер развертывания Deployment, так как он позволяет развёртывать и обновлять Pod'ы.
kind: Deployment
# даем название для настройки связей между объектами
metadata:
  name: some-app

spec:
  # желаемое количество реплик Pod'а 4, для отказоустойчивости имеет смысл добавить еще 1
  replicas: 5
  # селектор, который выбирает Pod'ы
  selector:
    matchLabels:
      app: some-app
  
  # Cтратегия развёртывания. Выбор на RollingUpdate для плавного обновления без простоев, который будет обновлять Pod'ы порциями
  strategy:
    type: RollingUpdate
    rollingUpdate:
      # Используем 1 дополнительный под для раскатки обновления
      maxSurge: 1
      # Ноль недоступных подов во время обновления для отказоустойчивости
      maxUnavailable: 0
  
  # шаблон для конфигурации POD 
  template:
    metadata:
      labels:
        app: some-app
    
    spec:
      # Обеспечивает равномерное распределение подов по зонам
      topologySpreadConstraints:
      # Разница в 1 под между зонами
      - maxSkew: 1
        # Используем зоны в качестве топологических доменов
        topologyKey: topology.kubernetes.io/zone
        # Не планировать под, если ограничение не соблюдается
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: some-app
      
      # Обеспечивает распределение подов по разным нодам
      affinity:
        podAntiAffinity:
          # preferredDuringScheduling - предпочтение, а не жесткое требование
          # IgnoredDuringExecution - не перемещать под, если условия изменились
          preferredDuringSchedulingIgnoredDuringExecution:
          # Вес применения правила, где 100% - применять всегда
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: some-app
              # Применяем на уровне нод кластера
              topologyKey: "kubernetes.io/hostname"

      # Основное приложение, запросы и лимиты ресурсы, пробы
      containers:
      - name: some-app
        # подгружаем image
        image: app-image:tag
        # блок про ресурсы
        resources:
          requests:
            cpu: 0.1
            # согласно условиям задачи ставим 128M
            memory: 128Mi
          limits:
            cpu: 0.25
            memory: 192Mi
        # Проверки живучести приложения, startupProbe — запущено ли приложение внутри контейнера?
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
            failureThreshold: 5
        # Готовность пода, исходя из времени инициализации приложения, к работе с клиентами в Кубере, готово ли приложение принимать и обрабатывать запросы.
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 25
          periodSeconds: 10
        # Проверка рабоспособности пода, смотрит за тем, поднялся ли контейнер
        livenessProbe:
          # проверка живучести выполнит запрос HTTP GET   
          httpGet:
            # путь к запросу в HTTP-запросе    
            path: /actuator/health
            # порт, к которому должна подключиться проверка 
            port: 8080
          # Параметры проверки, перед исполнением первой проверки подождать 15 секунд, пока стартанёт приложение
          initialDelaySeconds: 30
          # период выполнения проверки
          periodSeconds: 10
          # максимальное время выполнения проверки (по умолчанию 1 раз)
          timeoutSeconds: 2
          # сколько раз пробовать попытку, если она провалилась (по умолчанию 1 раз)
          failureThreshold: 2
